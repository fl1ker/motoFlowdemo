# Generated by Django 5.1.3 on 2024-12-10 13:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cars', '0002_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(help_text='Brand of the car', max_length=50, verbose_name='Brand')),
                ('model', models.CharField(help_text='Model of the car', max_length=50, verbose_name='Model')),
                ('registration_number', models.CharField(help_text='Registration number of the car', max_length=15, verbose_name='Registration Number')),
                ('vin_number', models.CharField(db_index=True, help_text='Unique Vehicle Identification Number', max_length=17, unique=True, verbose_name='VIN')),
                ('date_of_first_registration', models.DateField(help_text='The date when the car was first registered', verbose_name='First Registration Date')),
                ('body_type', models.CharField(choices=[('SEDAN', 'Sedan'), ('SUV', 'SUV'), ('HATCHBACK', 'Hatchback'), ('COUPE', 'Coupe'), ('CONVERTIBLE', 'Convertible'), ('OTHER', 'Other'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', help_text='Type of the car body (e.g., sedan, SUV)', max_length=50, verbose_name='Body Type')),
                ('year_of_production', models.PositiveIntegerField(help_text='The year the car was produced', verbose_name='Year of Production')),
                ('engine_capacity', models.PositiveIntegerField(help_text='Engine capacity in ccm)', verbose_name='Engine Capacity (ccm)')),
                ('engine_power', models.PositiveIntegerField(help_text='Engine power in horsepower', verbose_name='Engine Power (HP)')),
                ('gear_box', models.CharField(choices=[('MANUAL', 'Manual'), ('AUTOMATIC', 'Automatic'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', help_text='Type of gear box (manual or automatic)', max_length=10, verbose_name='Gear Box')),
                ('type_of_fuel', models.CharField(choices=[('PETROL', 'Petrol'), ('DIESEL', 'Diesel'), ('ELECTRIC', 'Electric'), ('HYBRID', 'Hybrid'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', help_text='Type of fuel used by the car', max_length=10, verbose_name='Fuel Type')),
                ('mileage', models.PositiveIntegerField(help_text='Total mileage of the car in kilometers', verbose_name='Mileage (km)')),
                ('damage_condition', models.TextField(blank=True, help_text="Details about the car's damage condition, if any", null=True, verbose_name='Damage Condition')),
            ],
            options={
                'verbose_name': 'Car',
                'verbose_name_plural': 'Cars',
                'ordering': ['brand', 'model'],
            },
        ),
        migrations.CreateModel(
            name='Dimensions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length_mm', models.PositiveIntegerField(verbose_name='Length (mm)')),
                ('width_mm', models.PositiveIntegerField(verbose_name='Width (mm)')),
                ('width_with_mirrors_mm', models.PositiveIntegerField(verbose_name='Width with Mirrors (mm)')),
                ('height_mm', models.PositiveIntegerField(verbose_name='Height (mm)')),
                ('wheelbase_mm', models.PositiveIntegerField(verbose_name='Wheelbase (mm)')),
                ('ground_clearance_mm', models.PositiveIntegerField(verbose_name='Ground Clearance (mm)')),
                ('aerodynamic_drag_coefficient', models.DecimalField(decimal_places=3, max_digits=4, verbose_name='Aerodynamic Drag Coefficient')),
                ('minimum_turning_diameter_m', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Minimum Turning Diameter (m)')),
            ],
        ),
        migrations.CreateModel(
            name='Drivetrain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drivetrain', models.CharField(max_length=50, verbose_name='Drivetrain')),
                ('transmission', models.CharField(max_length=50, verbose_name='Transmission')),
                ('front_suspension', models.CharField(max_length=100, verbose_name='Front Suspension')),
                ('rear_suspension', models.CharField(max_length=100, verbose_name='Rear Suspension')),
                ('front_brakes', models.CharField(max_length=50, verbose_name='Front Brakes')),
                ('rear_brakes', models.CharField(max_length=50, verbose_name='Rear Brakes')),
                ('steering_type', models.CharField(max_length=50, verbose_name='Steering Type')),
                ('steering_assist', models.CharField(max_length=50, verbose_name='Steering Assist')),
                ('tire_size', models.CharField(max_length=50, verbose_name='Tire Size')),
                ('wheel_size', models.CharField(max_length=50, verbose_name='Wheel Size')),
            ],
        ),
        migrations.CreateModel(
            name='EngineInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engine_power', models.PositiveIntegerField(verbose_name='Engine Power (HP)')),
                ('torque', models.PositiveIntegerField(verbose_name='Torque (Nm)')),
                ('engine_layout', models.CharField(max_length=50, verbose_name='Engine Layout')),
                ('engine_model_code', models.CharField(max_length=50, verbose_name='Engine Model Code')),
                ('engine_capacity_cc', models.PositiveIntegerField(verbose_name='Engine Capacity (ccm)')),
                ('cylinder_count', models.PositiveIntegerField(verbose_name='Cylinder Count')),
                ('cylinder_configuration', models.CharField(max_length=50, verbose_name='Cylinder Configuration')),
                ('bore_mm', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Bore (mm)')),
                ('stroke_mm', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Stroke (mm)')),
                ('compression_ratio', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Compression Ratio')),
                ('valves_per_cylinder', models.PositiveIntegerField(verbose_name='Valves per Cylinder')),
                ('fuel_injection_system', models.CharField(max_length=100, verbose_name='Fuel Injection System')),
                ('turbocharging', models.BooleanField(default=False, verbose_name='Turbocharging')),
                ('engine_oil_capacity_liters', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Engine Oil Capacity (Liters)')),
                ('coolant_capacity_liters', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Coolant Capacity (Liters)')),
            ],
        ),
        migrations.CreateModel(
            name='MetaCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=50, verbose_name='Brand')),
                ('model', models.CharField(max_length=50, verbose_name='Model')),
                ('generation', models.CharField(max_length=50, verbose_name='Generation')),
                ('production_start_year', models.PositiveIntegerField(verbose_name='Production Start Year')),
                ('production_end_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Production End Year')),
                ('body_type', models.CharField(max_length=50, verbose_name='Body Type')),
                ('seating_capacity', models.PositiveIntegerField(verbose_name='Seating Capacity')),
                ('door_count', models.PositiveIntegerField(verbose_name='Door Count')),
                ('dimensions', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta_car', to='cars.dimensions', verbose_name='Dimensions')),
                ('drivetrain', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta_car', to='cars.drivetrain', verbose_name='Drivetrain')),
                ('engine_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta_car', to='cars.engineinformation', verbose_name='Engine Information')),
            ],
            options={
                'verbose_name': 'Meta Car',
                'verbose_name_plural': 'Meta Cars',
                'ordering': ['brand', 'model', 'generation'],
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel_consumption_city', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Fuel Consumption (City)')),
                ('fuel_consumption_highway', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Fuel Consumption (Highway)')),
                ('fuel_consumption_combined', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Fuel Consumption (Combined)')),
                ('co2_emissions', models.PositiveIntegerField(verbose_name='CO2 Emissions (g/km)')),
                ('fuel_type', models.CharField(max_length=50, verbose_name='Fuel Type')),
                ('acceleration_0_100_kmh', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Acceleration (0-100 km/h)')),
                ('top_speed', models.PositiveIntegerField(verbose_name='Top Speed (km/h)')),
                ('ecological_standard', models.CharField(max_length=50, verbose_name='Ecological Standard')),
                ('weight_to_power_ratio', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Weight-to-Power Ratio')),
                ('torque_to_weight_ratio', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Torque-to-Weight Ratio')),
            ],
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curb_weight_kg', models.PositiveIntegerField(verbose_name='Curb Weight (kg)')),
                ('gross_vehicle_weight_kg', models.PositiveIntegerField(verbose_name='Gross Vehicle Weight (kg)')),
                ('max_load_kg', models.PositiveIntegerField(verbose_name='Max Load (kg)')),
                ('trunk_capacity_liters', models.PositiveIntegerField(verbose_name='Trunk Capacity (liters)')),
                ('fuel_tank_capacity_liters', models.PositiveIntegerField(verbose_name='Fuel Tank Capacity (liters)')),
                ('max_towed_weight_braked_kg', models.PositiveIntegerField(verbose_name='Max Towed Weight Braked (kg)')),
                ('max_towed_weight_unbraked_kg', models.PositiveIntegerField(verbose_name='Max Towed Weight Unbraked (kg)')),
                ('tow_hook_max_vertical_load_kg', models.PositiveIntegerField(verbose_name='Tow Hook Max Vertical Load (kg)')),
            ],
        ),
        migrations.DeleteModel(
            name='Cars',
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.AddField(
            model_name='car',
            name='meta_car',
            field=models.ForeignKey(blank=True, help_text='Detailed information from the database', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_cars', to='cars.metacar', verbose_name='Meta Car'),
        ),
        migrations.AddField(
            model_name='metacar',
            name='performance',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta_car', to='cars.performance', verbose_name='Performance'),
        ),
        migrations.AddField(
            model_name='metacar',
            name='volume',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta_car', to='cars.volume', verbose_name='Volume'),
        ),
    ]
